{"version":3,"sources":["webpack:///src/app/pages/UserManagement/graduate-list/graduate-list.module.ts","webpack:///src/app/pages/UserManagement/graduate-list/graduate-list.component.html","webpack:///src/app/pages/UserManagement/graduate-list/graduate-list.component.scss","webpack:///src/app/pages/UserManagement/graduate-list/graduate-list-routing.module.ts","webpack:///src/app/pages/UserManagement/graduate-list/graduate-list.component.ts"],"names":["GraduateListModule","declarations","imports","forRoot","providers","routes","path","component","GraduateListRoutingModule","forChild","exports","LNAME","NAMES","EMAILS","CREATION","LOCATION","WRKPREF","AVAILABILITY","EDUCATION","LICENSE","WRKRIGHTS","SKILLS","GraduateListComponent","route","Service","_snackBar","displayedColumns","selection","selectFilter","main_filter","sub_filter","flag","users","Array","from","length","_","k","createNewUser","dataSource","paginator","sort","filter","search","graduatelist","work_preference","availability","work_right","id","smallModal","show","delId","obj","deletedAt","user_id","deleteuser","subscribe","res","console","log","hide","code","open","duration","ngOnInit","err","limit","offset","role","gradlist","data","i","cType","workType","totalRecords","count","sortedData","status","filterValue","target","value","event","paginationOptionChange","e","name","_id","getGradDropDown","evt","topPage","pageIndex","pageSize","numSelected","selected","numRows","isAllSelected","clear","select","row","isSelected","selector","template","Math","round","random","email","company","location","wrkpref","education","license","wrkrights","skills","toString","lname"],"mappings":"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","file":"pages-UserManagement-graduate-list-graduate-list-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GraduateListRoutingModule } from './graduate-list-routing.module';\nimport { GraduateListComponent } from './graduate-list.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatInputModule } from '@angular/material/input';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n\n\n\n@NgModule({\n  declarations: [\n    GraduateListComponent\n  ],\n  imports: [\n    CommonModule,\n    GraduateListRoutingModule,\n    MatPaginatorModule,\n    MatSlideToggleModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    FormsModule,\n    MatIconModule,\n    MatMenuModule,\n    MatInputModule,\n    ModalModule,\n    BsDropdownModule.forRoot() ,\n    MatProgressBarModule\n  ],\n  providers: [BsModalRef]\n})\nexport class GraduateListModule { }\n","export default \"<section class=\\\"grad-mn-list\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"tabl_upr d-flex align-items-center justify-content-between\\\">\\n          <mat-form-field appearance=\\\"standard\\\">\\n            <mat-label>Filter</mat-label>\\n            <input matInput (keyup)=\\\"applyFilter($event)\\\" placeholder=\\\"Ex. Mia\\\" class=\\\"filter_input\\\" #input>\\n          </mat-form-field>\\n\\n\\n          <div class=\\\"fltr_div d-flex align-items-center\\\">\\n            <div class=\\\"form-group mb-0 ml-3\\\">\\n              <select class=\\\"form-control custom-select\\\" [(ngModel)]=\\\"main_filter\\\" (change)=\\\"selectfilter($event)\\\">\\n                <option selected>Select Filter</option>\\n                <option value=\\\"work_preference\\\" >Work Preference</option>\\n                <option value=\\\"availability\\\">Availability</option>\\n                <option value=\\\"work_right\\\">Work Rights</option>\\n                <!-- <option>Education</option> -->\\n                <!-- <option>License</option> -->\\n                <!-- <option>Skills</option> -->\\n                   <!-- <option>Location</option> -->\\n              </select>\\n            </div>\\n\\n            <div class=\\\"form-group mb-0 ml-3\\\">\\n              <select [(ngModel)]=\\\"sub_filter\\\" class=\\\"form-control custom-select\\\">\\n                <option selected> Select Sub-Filter</option>\\n                <option  *ngFor=\\\"let filter of selectFilter\\\" value=\\\"{{filter._id}}\\\" (click)=\\\"selectsubfilter($event)\\\" >{{filter.name}}</option>\\n              </select>\\n            </div>\\n\\n            <div class=\\\"appl_fltr ml-3\\\" >\\n              <button class=\\\"btn btn-primary\\\" (click)=\\\"applyfilters()\\\"  >\\n                Apply Filter\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n\\n        \\n\\n        <div class=\\\"mat-elevation-z8\\\">\\n          <div class=\\\"table-responsive\\\">\\n            <table mat-table [dataSource]=\\\"gradlist\\\" matSort>\\n              <!-- Checkbox Column -->\\n              <ng-container matColumnDef=\\\"select\\\">\\n                <th mat-header-cell *matHeaderCellDef>\\n                  <mat-checkbox (change)=\\\"$event ? masterToggle() : null\\\"\\n                    [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\n                    [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\"\\n                    [aria-label]=\\\"checkboxLabel()\\\" class=\\\"td-check\\\">\\n                  </mat-checkbox>\\n                </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                  <mat-checkbox (click)=\\\"$event.stopPropagation()\\\"\\n                    (change)=\\\"$event ? selection.toggle(row) : null\\\"\\n                    [checked]=\\\"selection.isSelected(row)\\\"\\n                    [aria-label]=\\\"checkboxLabel(row)\\\" class=\\\"td-check\\\">\\n                  </mat-checkbox>\\n                </td>\\n              </ng-container>\\n\\n              <!-- ID Column -->\\n              <ng-container matColumnDef=\\\"id\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> S.No </th>\\n                <td mat-cell *matCellDef=\\\"let row; let i=index\\\">  {{i+1}}</td>\\n              </ng-container>\\n\\n              <!-- Name Column -->\\n              <ng-container matColumnDef=\\\"name\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row?.first_name | titlecase}} </td>\\n              </ng-container>\\n              <!-- Email Column -->\\n              <ng-container matColumnDef=\\\"email\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Email Address</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">  {{row?.email | titlecase}}  </td>\\n              </ng-container>\\n              <!-- Company Column -->\\n              <ng-container matColumnDef=\\\"company\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Creation Date (Time)</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row?.createdAt | date}} </td>\\n              </ng-container>\\n\\n              <ng-container matColumnDef=\\\"location\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Location</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row?.location?.name | titlecase}} </td>\\n              </ng-container>\\n\\n              <ng-container matColumnDef=\\\"wrkpref\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Work Preference</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">{{row?.work_preference | titlecase}}  </td>\\n              </ng-container>\\n\\n              <ng-container matColumnDef=\\\"availability\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Availability</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row?.availability | titlecase}} </td>\\n              </ng-container>\\n\\n              <!-- <ng-container matColumnDef=\\\"education\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Education</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.education}} </td>\\n              </ng-container> -->\\n\\n              <!-- <ng-container matColumnDef=\\\"license\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>License</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.license}} </td>\\n              </ng-container> -->\\n\\n              <ng-container matColumnDef=\\\"wrkrights\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Work Rights</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row?.work_right?.work_right | titlecase}} </td>\\n              </ng-container>\\n\\n              <!-- <ng-container matColumnDef=\\\"skills\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Skills</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.skills}} </td>\\n              </ng-container> -->\\n             \\n              <!-- lname Column -->\\n              <ng-container matColumnDef=\\\"lname\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Last Name </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row?.last_name | titlecase}} </td>\\n              </ng-container>\\n              <!-- status column -->\\n              <ng-container matColumnDef=\\\"status\\\">\\n                <th mat-header-cell *matHeaderCellDef> Status </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                     <mat-slide-toggle [checked]=\\\"row.status=='active'?true:false\\\"></mat-slide-toggle>\\n                   </td>\\n              </ng-container>\\n               <!-- Action column -->\\n               <ng-container matColumnDef=\\\"action\\\">\\n                <th mat-header-cell *matHeaderCellDef> Action </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                    <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" class=\\\"td-btn\\\">\\n                      <mat-icon>more_vert</mat-icon>\\n                    </button>\\n                    <mat-menu #menu=\\\"matMenu\\\" class=\\\"td-menu\\\">\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"/viewGraduate/{{row._id}}\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">visibility</mat-icon>\\n                        <span>View</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"/editGraduate/{{row._id}}\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">edit</mat-icon>\\n                        <span>Edit</span>\\n                      </a>\\n                      <!-- <a mat-menu-item class=\\\"\\\" data-toggle=\\\"modal\\\" (click)=\\\"resetpswrd.show()\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">cached</mat-icon>\\n                        <span>Reset Password</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">block</mat-icon>\\n                        <span>Ban</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">message</mat-icon>\\n                        <span>Send Message</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">email</mat-icon>\\n                        <span>Send Email</span>\\n                      </a> -->\\n                      <a mat-menu-item class=\\\"\\\" data-toggle=\\\"modal\\\" (click)=\\\"modal(row._id)\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">delete</mat-icon>\\n                        <span>Delete</span>\\n                      </a>\\n                    </mat-menu>\\n                </td>\\n              </ng-container>\\n\\n              <!-- Progress Column -->\\n              <!-- <ng-container matColumnDef=\\\"progress\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Progress </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.progress}}% </td>\\n              </ng-container> -->\\n\\n              <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n              <!-- Row shown when there is no matching data. -->\\n              <tr class=\\\"mat-row\\\" *matNoDataRow>\\n                <td class=\\\"mat-cell\\\" colspan=\\\"4\\\">No data matching the filter \\\"{{input.value}}\\\"</td>\\n              </tr>\\n            </table>\\n          </div>\\n\\n          <mat-paginator [length]=\\\"totalRecords\\\" [pageIndex]=\\\"topPage\\\" [pageSize]=\\\"limit\\\"\\n          [pageSizeOptions]=\\\"getPageSizeOptions()\\\" (page)=\\\"paginationOptionChange($event)\\\"  aria-label=\\\"Select page of users\\\"></mat-paginator>\\n        </div>\\n\\n\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<!-- Modal -->\\n<div bsModal #smallModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"smallModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-sm\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close td-btn\\\" (click)=\\\"smallModal.hide()\\\" aria-label=\\\"Close\\\">\\n          <span aria-hidden=\\\"true\\\" class=\\\"prof_modclose\\\">\\n            <img src=\\\"assets/img/Group 225.png\\\">\\n          </span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <p class=\\\"mb-0\\\">Are you sure you want to delete the selected user's account?</p>\\n      </div>\\n      <div class=\\\"modal-footer justify-content-center\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"smallModal.hide()\\\">No</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"deletegraduate(this.delId)\\\">Yes</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n<div bsModal #resetpswrd=\\\"bs-modal\\\" class=\\\"modal fade reset_pswrd\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"replyModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close td-btn\\\" (click)=\\\"resetpswrd.hide()\\\" aria-label=\\\"Close\\\">\\n          <span aria-hidden=\\\"true\\\" class=\\\"prof_modclose\\\">\\n            <img src=\\\"assets/img/Group 225.png\\\">\\n          </span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <form>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Current Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" value=\\\"abc123@\\\">\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label>New Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\">\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label>Confirm Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\">\\n              </div>\\n            </div>\\n          </div>\\n        </form>\\n      </div>\\n      <div class=\\\"modal-footer justify-content-center\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"resetpswrd.hide()\\\">Cancel</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJncmFkdWF0ZS1saXN0LmNvbXBvbmVudC5zY3NzIn0= */\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { GraduateListComponent } from './graduate-list.component';\n\nconst routes: Routes = [\n\t{\n\t\tpath: '',\n\t\tcomponent: GraduateListComponent\n\t}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GraduateListRoutingModule { }\n","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport { TopgradserviceService } from '../../../topgradservice.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\ndeclare var $;\n\n\nexport interface UserData {\n  id: string;\n  name: string;\n  lname: string;\n  email: string;\n  company: string;\n  location: string;\n  wrkpref: string;\n  availability: string;\n  education: string;\n  license: string;\n  wrkrights: string;\n  skills: string;\n}\n\n/** Constants used to fill up our data base. */\nconst LNAME: string[] = [\n  'A', 'T', 'V', 'C', 'J', 'R', 'J', 'J'\n];\nconst NAMES: string[] = [\n  'Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack', 'Charlotte', 'Theodore', 'Isla', 'Oliver',\n  'Isabella', 'Jasper', 'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'\n];\nconst EMAILS: string[] = [\n  'maia@gmail.com', 'asher@gmail.com', 'olivia@gmail.com', 'atticus@gmail.com', 'amelia@gmail.com', 'jack@gmail.com', 'charlotte@gmail.com', 'theodore@gmail.com', 'isla@gmail.com', 'oliver@gmail.com',\n  'isabella@gmail.com', 'jasper@gmail.com', 'cora@gmail.com', 'levi@gmail.com', 'violet@gmail.com', 'arthur@gmail.com', 'mia@gmail.com', 'thomas@gmail.com', 'elizabeth@gmail.com'\n];\nconst CREATION: string[] = [\n  '12-01-2012 (06:22 PM)', '12-12-2012 (02:22 PM)', '12-12-2012 (03:12 PM)', '24-11-2012 (03:12 PM)', '12-01-2012 (09:23 AM)', '12-01-2012 (09:23 AM)', '12-01-2012 (10:23 AM)', '12-01-2012 (07:14 PM)', '12-01-2012 (03:30 PM)',\n  '09-01-2021 (09:12 AM)', '09-01-2021 (06:22 PM)', '12-01-2012 (02:22 PM)', '12-04-2012 (03:12 PM)', '12-01-2012 (09:12 AM)', '12-01-2012 (06:22 PM)', '12-01-2012 (06:22 PM)', '09-01-2021 (06:22 PM)'\n];\nconst LOCATION: string[] = [\n  'Sydney', 'Melbourne'\n];\nconst WRKPREF: string[] = [\n  'Open', 'Any'\n];\nconst AVAILABILITY: string[] = [\n  'Any', 'Remote'\n];\nconst EDUCATION: string[] = [\n  'Macquarie University', 'The University of New England', 'The University of Sydney', 'Western Sydney University'\n];\nconst LICENSE: string[] = [\n  'Available', 'Not Available'\n];\nconst WRKRIGHTS: string[] = [\n  'Available', 'Not Available'\n];\nconst SKILLS: string[] = [\n  'Figma', 'Adobe Illustrator'\n];\n\n\n\n@Component({\n  selector: 'app-graduate-list',\n  templateUrl: './graduate-list.component.html',\n  styleUrls: ['./graduate-list.component.scss']\n})\nexport class GraduateListComponent implements AfterViewInit {\n  \n\tdisplayedColumns: string[] = ['select', 'id', 'name', 'lname', 'email', 'company', 'location', 'wrkpref', 'availability','wrkrights', 'status', 'action'];\n\tdataSource: MatTableDataSource<UserData>;\n  selection = new SelectionModel<UserData>(true, []);\n\n  @ViewChild('smallModal') public smallModal: ModalDirective;\n\t@ViewChild(MatPaginator) paginator: MatPaginator;\n\t@ViewChild(MatSort) sort: MatSort;\n  filter: any;\n  event: any;\n  selectFilter: any = [];\n  delId:any;\n  gradlist: any;\n  search: any;\n  totalRecords: any;\n  sortedData: any;\n  graduateList: any;\n  topPage: any;\n  work_preference: any;\n  work_right: any;\n  availability: any;\n  filterValue: any;\n  main_filter: string = \"\"\n  sub_filter: string = \"\"\n  flag: boolean = false;\n\n\tconstructor(private route:ActivatedRoute,private Service:TopgradserviceService,private _snackBar: MatSnackBar) { \n\t\t // Create 100 users\n\t\tconst users = Array.from({length: 50}, (_, k) => createNewUser(k + 1));\n\n\t\t// Assign the data to the data source for the table to render\n\t\tthis.dataSource = new MatTableDataSource(users);\n\t}\n\n\t ngAfterViewInit() {\n\t    this.dataSource.paginator = this.paginator;\n\t    this.dataSource.sort = this.sort;\n\n      \n\t  }\n\n\tngOnInit(): void {\n    \n    this.filter=''\n    this.search = ''\n    this.graduatelist();\n    this.work_preference = \"\"\n    this.availability = \"\"\n    this.work_right = \"\"\n\t}\n\n  modal(id){\n    this.smallModal.show()\n    this.delId=id\n  }\n\n  deletegraduate(id){\n    var obj = {\n      deletedAt : true,\n      user_id: id\n    }\n    this.Service.deleteuser(obj).subscribe(res=>{\n      console.log(\"fgdgfdgfdfgdfgd\",res);\n      this.smallModal.hide()\n      if(res.code==200){\n        this._snackBar.open(\"User Deleted Successfully\",\"close\",{\n          duration: 2000\n        });\n        this.ngOnInit()\n      }\n    },err => {\n      console.log(err);\n      this._snackBar.open(\"Some Error Occued\",\"close\",{\n        duration: 2000})\n      })\n  }\n\n\n  graduatelist() {\n    var obj: any = {\n      limit: 5,\n      offset: 0,\n      role: \"Graduate\",\n      search: this.search,\n    }\n    if (this.main_filter && this.sub_filter) {\n      obj[this.main_filter] = this.sub_filter\n    }\n    console.log(\"Obj is====\", obj);\n    this.Service.gradlist(obj).subscribe(data => {\n      console.log(\"main data for users is ====\", data)\n      this.gradlist = data.data\n\n      for (let i = 0; i < this.gradlist?.length; i++) {\n        if (this.gradlist[i].availability == 'full_time') {\n          let cType = \"Full Time\"\n          this.gradlist[i].cType = cType\n        }\n        else if (this.gradlist[i].availability == \"part_time\") {\n          let cType = 'Part Time'\n          this.gradlist[i].cType = cType\n        }\n\n        if (this.gradlist[i].work_right?.work_right == '6229c90da69fcf8fc87e2827') {\n          let workType = 'Permanent Resident/Citizen'\n          this.gradlist[i].workType = workType\n        }\n        else if (this.gradlist[i].work_right?.work_right == \"6229c917a69fcf8fc87e2828\") {\n          let workType = 'Full Time Work Rights'\n          this.gradlist[i].workType = workType\n        }\n        else if (this.gradlist[i].work_right?.work_right == \"6229c91fa69fcf8fc87e2829\") {\n          let workType = 'Student Visa'\n          this.gradlist[i].workType = workType\n        }\n      }\n      this.totalRecords = data.count\n      this.sortedData = this.gradlist\n    }, err => {\n      console.log(err.status)\n      if (err.status >= 404) {\n        console.log('Some error occured')\n      } else {\n        console.log('Internet Connection Error')\n      }\n    })\n  }\n\n  applyFilter(filterValue) {\n    this.search = filterValue.target.value\n    console.log(\"seacrh=====>\", this.search);\n    if (this.event) {\n      this.paginationOptionChange(this.event)\n    }\n    else {\n      this.graduatelist()\n    }\n    console.log(\"apply filter===>>\", this.event)\n    console.log(\"filter value===>>>\", this.filterValue)\n  }\n\n  selectfilter(e) {\n    if (e.target.value == \"Select Filter\") {\n      this.selectFilter = []\n    }\n    else if (e.target.value == \"work_preference\") {\n      this.selectFilter = [\n        { name: 'Internship', _id: \"internship\" },\n        { name: 'Job', _id: \"job\" },\n        { name: 'Any', _id: \"any\" }\n      ]\n    }\n    else if (e.target.value == \"availability\") {\n      this.selectFilter = [\n        { name: 'Any', _id: \"any\" },\n        { name: 'Part Time', _id: \"part_time\" },\n        { name: 'Full Time', _id: \"full_time\" }\n      ]\n\n    }\n    else if (e.target.value == \"work_right\") {\n      this.Service.getGradDropDown().subscribe(res => {\n        console.log(\"fnjdskjfhdskjf\", res);\n        this.selectFilter = res.data\n\n      })\n      // this.selectFilter = [\n      //   { name: 'Permanent Resident/Citizen', value: \"6229c90da69fcf8fc87e2827\" },\n      //   { name: 'Full Time Work Rights', value: \"6229c917a69fcf8fc87e2828\" },\n      //   { name: 'Student Visa', value: \"6229c91fa69fcf8fc87e2829\" },\n      // ]\n\n    }\n\n  }\n\n  applyfilters() {\n    this.flag = true\n    this.graduatelist()\n  }\n   paginationOptionChange(evt) {\n    this.event = evt\n    this.topPage = evt.pageIndex\n\n    var obj: any = {\n      role: \"Graduate\",\n      search: this.search,\n      limit: evt.pageSize,\n      offset: (evt.pageIndex * evt.pageSize),\n    }\n    if (this.main_filter && this.sub_filter && this.flag == true) {\n      obj[this.main_filter] = this.sub_filter\n    }\n    console.log(\"paginator obj==========\", obj);\n    this.Service.gradlist(obj).subscribe(data => {\n      console.log(\"main data for users is ====\", data)\n      this.gradlist = data.data\n\n      for (let i = 0; i < this.gradlist?.length; i++) {\n        if (this.gradlist[i].availability == 'full_time') {\n          let cType = \"Full Time\"\n          this.gradlist[i].cType = cType\n        }\n        else if (this.gradlist[i].availability == \"part_time\") {\n          let cType = 'Part Time'\n          this.gradlist[i].cType = cType\n        }\n\n        if (this.gradlist[i].work_right?.work_right == '6229c90da69fcf8fc87e2827') {\n          let workType = 'Permanent Resident/Citizen'\n          this.gradlist[i].workType = workType\n        }\n        else if (this.gradlist[i].work_right?.work_right == \"6229c917a69fcf8fc87e2828\") {\n          let workType = 'Full Time Work Rights'\n          this.gradlist[i].workType = workType\n        }\n        else if (this.gradlist[i].work_right?.work_right == \"6229c91fa69fcf8fc87e2829\") {\n          let workType = 'Student Visa'\n          this.gradlist[i].workType = workType\n        }\n      }\n      this.totalRecords = data.count\n      this.sortedData = this.gradlist\n    })\n  }\n  getPageSizeOptions() {\n    return [5,10,50,100];\n  }\n\n\n  \n\n   /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n   /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: UserData): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id + 1}`;\n  }\n\n}\n\nfunction createNewUser(id: number): UserData {\n  const name = NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ';\n  const email = EMAILS[Math.round(Math.random() * (EMAILS.length - 1))] + ' ';\n  const company = CREATION[Math.round(Math.random() * (CREATION.length - 1))] + ' ';\n  const location = LOCATION[Math.round(Math.random() * (LOCATION.length - 1))] + ' ';\n  const wrkpref = WRKPREF[Math.round(Math.random() * (WRKPREF.length - 1))] + ' ';\n  const availability = AVAILABILITY[Math.round(Math.random() * (AVAILABILITY.length - 1))] + ' ';\n  const education = EDUCATION[Math.round(Math.random() * (EDUCATION.length - 1))] + ' ';\n  const license = LICENSE[Math.round(Math.random() * (LICENSE.length - 1))] + ' ';\n  const wrkrights = WRKRIGHTS[Math.round(Math.random() * (WRKRIGHTS.length - 1))] + ' ';\n  const skills = SKILLS[Math.round(Math.random() * (SKILLS.length - 1))] + ' ';\n\n  return {\n    id: id.toString() + '.',\n    name: name,\n    email: email,\n    company: company,\n    lname: LNAME[Math.round(Math.random() * (LNAME.length - 1))],\n    location: location,\n    wrkpref: wrkpref,\n    availability: availability,\n    education: education,\n    license: license,\n    wrkrights: wrkrights,\n    skills: skills,\n\n  };\n}"]}