{"version":3,"sources":["webpack:///src/app/pages/UserManagement/employers-list/employers-list-routing.module.ts","webpack:///src/app/pages/UserManagement/employers-list/employers-list.component.html","webpack:///src/app/pages/UserManagement/employers-list/employers-list.module.ts","webpack:///src/app/pages/UserManagement/employers-list/employers-list.component.ts","webpack:///src/app/pages/UserManagement/employers-list/employers-list.component.scss"],"names":["routes","path","component","EmployersListRoutingModule","imports","forChild","exports","EmployersListModule","declarations","forRoot","providers","LNAME","NAMES","EMAILS","COMPANY","TITLE","CREATION","EmployersListComponent","route","Service","_snackBar","emplist","displayedColumns","selection","users","Array","from","length","_","k","createNewUser","dataSource","paginator","sort","search","employerlist","id","smallModal","show","delId","obj","deletedAt","user_id","deleteuser","subscribe","res","console","log","hide","code","open","duration","ngOnInit","err","limit","offset","role","data","totalRecords","status","filterValue","target","value","event","paginationOptionChange","evt","topPage","pageIndex","pageSize","sortedData","count","numSelected","selected","numRows","isAllSelected","clear","select","row","isSelected","selector","template","name","Math","round","random","email","company","jobtitle","creation","toString","lname"],"mappings":"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","file":"pages-UserManagement-employers-list-employers-list-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EmployersListComponent } from './employers-list.component';\n\nconst routes: Routes = [\n\t{\n\t\tpath: '',\n\t\tcomponent: EmployersListComponent\n\t}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EmployersListRoutingModule { }\n","export default \"<section class=\\\"employer-mng-list\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <div class=\\\"tabl_upr d-flex align-items-center justify-content-between\\\">\\n          <mat-form-field appearance=\\\"standard\\\">\\n            <mat-label>Filter</mat-label>\\n            <input matInput (keyup)=\\\"applyFilter($event)\\\" [(ngModel)]=\\\"search\\\" placeholder=\\\"Ex. Mia\\\" class=\\\"filter_input\\\" #input>\\n          </mat-form-field>\\n          <!-- <div class=\\\"fltr_div d-flex align-items-center\\\">\\n            <div class=\\\"form-group mb-0 ml-3\\\">\\n              <select class=\\\"form-control custom-select\\\">\\n                  <option selected>Select Filter</option>\\n                  <option>Location</option>\\n                  <option>Work Preference</option>\\n                  <option>Availability</option>\\n                  <option>Education</option>\\n                  <option>License</option>\\n                  <option>Work Rights</option>\\n                  <option>Skills</option>\\n              </select>\\n            </div>\\n\\n            <div class=\\\"form-group mb-0 ml-3\\\">\\n              <select class=\\\"form-control custom-select\\\">\\n                  <option selected>Select Sub-Filter</option>\\n                  <option>Melbourne</option>\\n                  <option>Sydney</option>\\n              </select>\\n            </div>\\n            <div class=\\\"appl_fltr ml-3\\\">\\n              <button class=\\\"btn btn-primary\\\">\\n              Apply Filter\\n            </button>\\n            </div>\\n          </div> -->\\n        </div>\\n\\n        <div class=\\\"mat-elevation-z8\\\">\\n          <div class=\\\"table-responsive\\\">\\n            <table mat-table [dataSource]=\\\"emplist\\\" matSort>\\n\\n              <!-- Checkbox Column -->\\n              <ng-container matColumnDef=\\\"select\\\">\\n                <th mat-header-cell *matHeaderCellDef>\\n                  <mat-checkbox (change)=\\\"$event ? masterToggle() : null\\\"\\n                    [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\n                    [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\"\\n                    [aria-label]=\\\"checkboxLabel()\\\" class=\\\"td-check\\\">\\n                  </mat-checkbox>\\n                </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                  <mat-checkbox (click)=\\\"$event.stopPropagation()\\\"\\n                    (change)=\\\"$event ? selection.toggle(row) : null\\\"\\n                    [checked]=\\\"selection.isSelected(row)\\\"\\n                    [aria-label]=\\\"checkboxLabel(row)\\\" class=\\\"td-check\\\">\\n                  </mat-checkbox>\\n                </td>\\n              </ng-container>\\n              <!-- ID Column -->\\n              <ng-container matColumnDef=\\\"id\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> S.No </th>\\n                <td mat-cell *matCellDef=\\\"let row ; let i=index\\\">  {{i+1}} </td>\\n              </ng-container>\\n\\n              <!-- Name Column -->\\n              <ng-container matColumnDef=\\\"name\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.first_name}} </td>\\n              </ng-container>\\n               <!-- lname Column -->\\n              <ng-container matColumnDef=\\\"lname\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Last Name </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.last_name}} </td>\\n              </ng-container>\\n              <!-- Email Column -->\\n              <ng-container matColumnDef=\\\"email\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Work Email Address</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.email}} </td>\\n              </ng-container>\\n              <!-- Company Column -->\\n              <ng-container matColumnDef=\\\"company\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Company Name</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.company_name}} </td>\\n              </ng-container>\\n               <!-- Job title Column -->\\n              <ng-container matColumnDef=\\\"jobtitle\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Job Title</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.role}} </td>\\n              </ng-container>\\n               <!-- creation date Column -->\\n              <ng-container matColumnDef=\\\"creation\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Creation Date (Time)</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.createdAt | date}} </td>\\n              </ng-container>\\n              <!-- status column -->\\n              <ng-container matColumnDef=\\\"status\\\">\\n                <th mat-header-cell *matHeaderCellDef> Status </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\" >\\n                     <mat-slide-toggle [checked]=\\\"row.status=='active'?true:false\\\"></mat-slide-toggle>\\n                   </td>\\n              </ng-container>\\n               <!-- Action column -->\\n               <ng-container matColumnDef=\\\"action\\\">\\n                <th mat-header-cell *matHeaderCellDef> Action </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                    <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" class=\\\"td-btn\\\">\\n                      <mat-icon>more_vert</mat-icon>\\n                    </button>\\n                    <mat-menu #menu=\\\"matMenu\\\" class=\\\"td-menu\\\">\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"/viewEmployer/{{row._id}}\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">visibility</mat-icon>\\n                        <span>View</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"/editEmployer/{{row._id}}\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">edit</mat-icon>\\n                        <span>Edit</span>\\n                      </a>\\n                      <!-- <a mat-menu-item class=\\\"\\\" data-toggle=\\\"modal\\\" (click)=\\\"resetpswrd.show()\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">cached</mat-icon>\\n                        <span>Reset Password</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">block</mat-icon>\\n                        <span>Ban</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">message</mat-icon>\\n                        <span>Send Message</span>\\n                      </a>\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">email</mat-icon>\\n                        <span>Send Email</span>\\n                      </a> -->\\n                      <a mat-menu-item class=\\\"\\\" data-toggle=\\\"modal\\\" (click)=\\\"modal(row._id)\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\" >delete</mat-icon>\\n                        <span>Delete</span>\\n                      </a>\\n                    </mat-menu>\\n                </td>\\n              </ng-container>\\n\\n              <!-- Progress Column -->\\n              <!-- <ng-container matColumnDef=\\\"progress\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Progress </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.progress}}% </td>\\n              </ng-container> -->\\n\\n              <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n              <!-- Row shown when there is no matching data. -->\\n              <tr class=\\\"mat-row\\\" *matNoDataRow>\\n                <td class=\\\"mat-cell\\\" colspan=\\\"4\\\">No data matching the filter \\\"{{input.value}}\\\"</td>\\n              </tr>\\n            </table>\\n          </div>\\n          <mat-paginator [length]=\\\"totalRecords\\\" [pageIndex]=\\\"topPage\\\" [pageSize]=\\\"limit\\\"\\n          [pageSizeOptions]=\\\"getPageSizeOptions()\\\" (page)=\\\"paginationOptionChange($event)\\\" aria-label=\\\"Select page of users\\\"></mat-paginator>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n\\n<!-- Modal -->\\n<div bsModal #smallModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"smallModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-sm\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close td-btn\\\" (click)=\\\"smallModal.hide()\\\" aria-label=\\\"Close\\\">\\n          <span aria-hidden=\\\"true\\\" class=\\\"prof_modclose\\\">\\n            <img src=\\\"assets/img/Group 225.png\\\">\\n          </span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <p class=\\\"mb-0\\\">Are you sure you want to delete the selected user's account?</p>\\n      </div>\\n      <div class=\\\"modal-footer justify-content-center\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"smallModal.hide()\\\">No</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"deleteEmployer(this.delId)\\\">Yes</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n<div bsModal #resetpswrd=\\\"bs-modal\\\" class=\\\"modal fade reset_pswrd\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"replyModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close td-btn\\\" (click)=\\\"resetpswrd.hide()\\\" aria-label=\\\"Close\\\">\\n          <span aria-hidden=\\\"true\\\" class=\\\"prof_modclose\\\">\\n            <img src=\\\"assets/img/Group 225.png\\\">\\n          </span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <form>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-12\\\">\\n              <div class=\\\"form-group\\\">\\n                <label>Current Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" value=\\\"abc123@\\\">\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label>New Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\">\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label>Confirm Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\">\\n              </div>\\n            </div>\\n          </div>\\n        </form>\\n      </div>\\n      <div class=\\\"modal-footer justify-content-center\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"resetpswrd.hide()\\\">Cancel</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmployersListComponent } from './employers-list.component';\n\nimport { EmployersListRoutingModule } from './employers-list-routing.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatInputModule } from '@angular/material/input';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n\n\n@NgModule({\n  declarations: [\n    EmployersListComponent\n  ],\n  imports: [\n    MatPaginatorModule,\n    MatSlideToggleModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    FormsModule,\n    MatIconModule,\n    MatMenuModule,\n    MatInputModule,\n    ModalModule,\n    BsDropdownModule.forRoot() ,\n    EmployersListRoutingModule,\n    CommonModule,\n    MatProgressBarModule\n  ],\n  providers: [BsModalRef]\n})\nexport class EmployersListModule { }\n","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport { TopgradserviceService } from '../../../topgradservice.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nexport interface UserData {\n  id: string;\n  name: string;\n  lname: string;\n  email: string;\n  company: string;\n  jobtitle: string;\n  creation: string;\n}\n\n/** Constants used to fill up our data base. */\nconst LNAME: string[] = [\n  'A', 'T', 'V', 'C', 'J', 'R', 'J', 'J'\n];\nconst NAMES: string[] = [\n  'Maia', 'Asher', \n];\nconst EMAILS: string[] = [\n  'maia@gmail.com', 'asher@gmail.com', 'olivia@gmail.com', 'atticus@gmail.com', 'amelia@gmail.com', 'jack@gmail.com', 'charlotte@gmail.com', 'theodore@gmail.com', 'isla@gmail.com', 'oliver@gmail.com',\n  'isabella@gmail.com', 'jasper@gmail.com', 'cora@gmail.com', 'levi@gmail.com', 'violet@gmail.com', 'arthur@gmail.com', 'mia@gmail.com', 'thomas@gmail.com', 'elizabeth@gmail.com'\n];\nconst COMPANY: string[] = [\n  'Promatics', 'PromaticsA', 'PromaticsB', 'PromaticsC', 'PromaticsD', 'PromaticsE', 'PromaticsF', 'PromaticsG', 'Promatics', 'Promatics',\n  'Promatics', 'Promatics', 'Promatics', 'Promatics', 'Promatics', 'Promatics', 'Promatics', 'Promatics', 'Promatics'\n];\nconst TITLE: string[] = [\n  'Employer', 'Employer', 'Employer', 'Employer', 'Employer', 'Employer', 'Employer', 'Employer', 'Employer', 'Promatics',\n  'Promatics', 'Promatics', 'Employer', 'Employer', 'Employer', 'Employer', 'Employer', 'Promatics', 'Promatics'\n];\nconst CREATION: string[] = [\n  '12-01-2012 (06:22 PM)', '12-12-2012 (02:22 PM)', '12-12-2012 (03:12 PM)', '24-11-2012 (03:12 PM)', '12-01-2012 (06:22 PM)', '12-01-2012 (02:22 PM)', '12-01-2012 (03:12 PM)', '12-01-2012 (03:12 PM)', '12-01-2012 (03:12 PM)',\n  '09-01-2021 (06:22 PM)', '09-01-2021 (06:22 PM)', '12-01-2012 (02:22 PM)', '12-04-2012 (03:12 PM)', '12-01-2012 (06:22 PM)', '12-01-2012 (02:22 PM)', '12-01-2012 (02:22 PM)', '09-01-2021 (03:12 PM)'\n];\n\n\n@Component({\n  selector: 'app-employers-list',\n  templateUrl: './employers-list.component.html',\n  styleUrls: ['./employers-list.component.scss']\n})\nexport class EmployersListComponent implements AfterViewInit {\n  emplist=[]\n  displayedColumns: string[] = ['select', 'id', 'name', 'lname', 'email', 'company', 'jobtitle','status', 'creation', 'action'];\n  dataSource: MatTableDataSource<UserData>;\n  selection = new SelectionModel<UserData>(true, []);\n\n\n  @ViewChild('smallModal') public smallModal: ModalDirective;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  totalRecords: any;\n  delId: any;\n  event: any;\n  topPage: any;\n  sortedData: any;\n  search: any;\n\n  constructor(private route:ActivatedRoute,private Service:TopgradserviceService,private _snackBar: MatSnackBar) {\n    // Create 100 users\n    const users = Array.from({length: 50}, (_, k) => createNewUser(k + 1));\n\n    // Assign the data to the data source for the table to render\n    this.dataSource = new MatTableDataSource(users);\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n   ngOnInit(): void {\n    this.search=''\n    this.employerlist();\n  }\n\n  modal(id){\n    this.smallModal.show()\n    this.delId=id\n  }\n\n  deleteEmployer(id){\n    var obj = {\n      deletedAt : true,\n      user_id: id\n    }\n    this.Service.deleteuser(obj).subscribe(res=>{\n      console.log(\"fgdgfdgfdfgdfgd\",res);\n      this.smallModal.hide()\n      if(res.code==200){\n        this._snackBar.open(\"User Deleted Successfully\",\"close\",{\n          duration: 2000\n        });\n        this.ngOnInit()\n      }\n    },err => {\n      console.log(err);\n      this._snackBar.open(\"Some Error Occued\",\"close\",{\n        duration: 2000})\n      })\n  }\n\n  employerlist(){\n    console.log(\"khjhgjhgjhgjhghjghjgjhghjg\");\n    \n    var obj:any = {\n    limit: 5,\n    offset: 0,\n    role: \"Employer\",\n    search:this.search\n    }\n    console.log(\"onnnn\", obj)\n    this.Service.emplist(obj).subscribe(data => {\n    console.log(\"main data for users is ====\", data)\n    this.emplist=data.data\n    this.totalRecords=data.length;\n    }, err => {\n    console.log(err.status)\n    if (err.status >= 404) {\n    console.log('Some error occured')\n    } else {\n    // this.toastr.error('Some error occured, please try again!!', 'Error')\n    console.log('Internet Connection Error')\n    }\n    })\n    }\n\n\n  applyFilter(filterValue) {\n   \n    this.search=filterValue.target.value\n    console.log(\"search\", this.search);\n    \n    console.log(\"after searchhhhh-00------------0=====\",this.event);\n\n    if(this.event){\n      console.log(\"after searchhhhh=====\",this.event);\n      \n      this.paginationOptionChange(this.event)\n    }\n    else{\n      this.employerlist()\n\n    }\n\n  }\n\n  paginationOptionChange(evt) {\n    this.event=evt\n    console.log(\"evthrm\", evt)\n    this.topPage = evt.pageIndex\n    console.log('rsawsfsdsf',this.topPage)\n    console.log(\"pagesize is======\",evt.pageSize);\n    \n   var obj:any = {\n    role: \"Employer\",\n    search:this.search,\n    limit: evt.pageSize,\n    offset: (evt.pageIndex*evt.pageSize)\n     }\n    //  if(this.search){\n    //   obj.search = this.search\n    // }\n    console.log(\"paginator obj==========\",obj);\n    \n     this.Service.emplist(obj).subscribe(async data => {\n       console.log(\"Response of all the service listing>>>>>\", data);\n        this.emplist=data.data,\n        this.sortedData=this.emplist\n        this.totalRecords = data.count\n     })\n  }\n  getPageSizeOptions() {\n    return [5,10,50,100];\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n   /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: UserData): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id + 1}`;\n  }\n\n}\n\nfunction createNewUser(id: number): UserData {\n  const name = NAMES[Math.round(Math.random() * (NAMES.length - 1))] + ' ';\n  const email = EMAILS[Math.round(Math.random() * (EMAILS.length - 1))] + ' ';\n  const company = COMPANY[Math.round(Math.random() * (COMPANY.length - 1))] + ' ';\n  const jobtitle = TITLE[Math.round(Math.random() * (TITLE.length - 1))] + ' ';\n  const creation = CREATION[Math.round(Math.random() * (CREATION.length - 1))] + ' ';\n\n  return {\n    id: id.toString() + '.',\n    name: name,\n    email: email,\n    company: company,\n    jobtitle: jobtitle,\n    creation: creation,\n    lname: LNAME[Math.round(Math.random() * (LNAME.length - 1))],\n\n  };\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJlbXBsb3llcnMtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */\";"]}