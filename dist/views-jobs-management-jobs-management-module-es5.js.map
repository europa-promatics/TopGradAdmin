{"version":3,"sources":["webpack:///src/app/views/jobs-management/jobs-management.component.scss","webpack:///src/app/views/jobs-management/jobs-management.module.ts","webpack:///src/app/views/jobs-management/jobs-management.component.ts","webpack:///src/app/views/jobs-management/jobs-management.component.html","webpack:///src/app/views/jobs-management/jobs-management-routing.module.ts"],"names":["JobsManagementModule","declarations","imports","forRoot","providers","DEADLINE","POSTEDBY","FIRSTNAME","LASTNAME","WORKTYPE","CONTRACT","TITLE","JobsManagementComponent","Service","fb","displayedColumns","selection","search","users","i","push","createNewUser","dataSource","sortedData","jobList1","slice","sort","data","console","log","active","direction","a","b","isAsc","compare","id","toUpperCase","first_name","last_name","work_type","contract_type","job_title","deadline_date","paginator","jobListing","evt","event","topPage","pageIndex","obj","limit","pageSize","offset","jobManagementList","subscribe","res","records","length","cType","totalRecords","count","filterValue","target","value","paginationOptionChange","firstPage","item_id","smallModal","show","ngOnInit","employer_job_id","hide","jobManagementDelete","showMessage","message","numSelected","selected","numRows","isAllSelected","clear","select","row","isSelected","selector","template","postedby","Math","round","random","lastName","worktype","contracttype","jobtitle","toString","deadline","routes","path","component","JobsManagementRoutingModule","forChild","exports"],"mappings":"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","file":"views-jobs-management-jobs-management-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJqb2JzLW1hbmFnZW1lbnQuY29tcG9uZW50LnNjc3MifQ== */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { JobsManagementRoutingModule } from './jobs-management-routing.module';\nimport { JobsManagementComponent } from './jobs-management.component';\nimport { EditorModule } from '@tinymce/tinymce-angular';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatIconModule } from '@angular/material/icon';\nimport { NgxDropzoneModule } from 'ngx-dropzone';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { BsModalRef, ModalModule } from 'ngx-bootstrap/modal';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { MatSortModule } from '@angular/material/sort';\n\n\n@NgModule({\n  declarations: [\n    JobsManagementComponent\n  ],\n  imports: [\n    CommonModule,\n    EditorModule,\n    MatSlideToggleModule,\n    MatIconModule,\n    NgxDropzoneModule,\n    FormsModule,\n    ReactiveFormsModule,CommonModule,\n    EditorModule,\n    MatSlideToggleModule,\n    MatIconModule,\n    NgxDropzoneModule,\n    FormsModule,\n    MatSortModule,\n    ReactiveFormsModule,\n    // MatFormFieldModule,\n    MatPaginatorModule,\n    BsDropdownModule.forRoot() ,\n    ModalModule,\n    MatFormFieldModule,\n    MatTableModule,\n    MatProgressBarModule,\n    MatMenuModule,\n    MatInputModule,\n    JobsManagementRoutingModule,\n    MatCheckboxModule\n  ],\n  providers: [BsModalRef]\n})\nexport class JobsManagementModule { }\n","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport { TopgradserviceService } from '../../topgradservice.service';\nimport { FormBuilder } from '@angular/forms';\n\nexport interface UserData {\n  id: string;\n  postedby: string;\n  deadline: string;\n  worktype: string;\n  contracttype: string;\n  jobtitle: string;\n  // applications: string;\n  first_name:string;\n  lastName:string\n}\n\n/** Constants used to fill up our data base. */\nconst DEADLINE: string[] = [\n  '08-09-2021', '07-09-2021', '01-09-2021', '08-09-2021', '08-09-2021', '08-09-2021', '08-09-2021', '08-09-2021'\n];\nconst POSTEDBY: string[] = [\n  'Maia', 'Asher', 'Olivia', 'Atticus', 'Amelia', 'Jack', 'Charlotte', 'Theodore', 'Isla', 'Oliver',\n  'Isabella', 'Jasper', 'Cora', 'Levi', 'Violet', 'Arthur', 'Mia', 'Thomas', 'Elizabeth'\n];\nconst FIRSTNAME: string[] = [\n];\nconst LASTNAME: string[] = [\n];\nconst WORKTYPE: string[] = [\n  'Employment', 'Employment', 'Internship', 'Employment', 'Employment', 'Employment', 'Employment', 'Employment', 'Internship'\n];\nconst CONTRACT: string[] = [\n  'Full-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time',\n  'Full-Time', 'Full-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time', 'Part-Time'\n];\nconst TITLE: string[] = [\n  'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'Promatics',\n  'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'UI/UX Designer', 'Promatics', 'Promatics'\n];\n// const APPLICATIONS: string[] = [\n//   '23', '33', '77', '34', '3', '56', '56', '56', '56', '78',\n//   '78', '78', '56', '56', '56', '56', '56', '78', '78'\n// ];\n\n\n@Component({\n  selector: 'app-jobs-management',\n  templateUrl: './jobs-management.component.html',\n  styleUrls: ['./jobs-management.component.scss']\n})\nexport class JobsManagementComponent implements AfterViewInit {\n\n  displayedColumns: string[] = ['select', 'id', 'postedby', 'jobtitle', 'worktype', 'contracttype', 'deadline', 'status', /*'applications',*/ 'action'];\n  dataSource: MatTableDataSource<UserData>;\n  selection = new SelectionModel<UserData>(true, []);\n  \n  @ViewChild('smallModal') public smallModal: ModalDirective;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  totalRecords: any;\n  jobList1: any;\n  sortedData: [];\n  topPage: any;\n  search: any=' ';\n  event: any;\n  filterValue: string;\n  item_id: any;\n  id: any;\n  contract_type: any;\n  data: any;\n\n  constructor(private Service: TopgradserviceService,private fb: FormBuilder) {\n  \n    const users : UserData[] = [];\n    for (let i =1; i <= 100; i++) { users.push(createNewUser(i)); };//paginator...........\n    \n    this.dataSource = new MatTableDataSource(users);\n\n    this.sortedData = this.jobList1?.slice();//sorting........\n  }\n\n\n\n  // sorting ----------------\n  sortData(sort: Sort) {\n    const data = this.jobList1.slice();\n    console.log(\"dfagfdtyewdtuyety\",data);\n    \n    if (!sort.active || sort.direction === '') {\n      this.sortedData = data;\n      return;\n    }\n\n    this.sortedData = data.sort((a, b) => {\n      const isAsc = sort.direction === 'asc';\n      switch (sort.active){\n        case 'id':\n          return compare(a.id?.toUpperCase(), b.id?.toUpperCase(), isAsc);\n        case 'first_name':\n          return compare(a.first_name?.toUpperCase(), b.first_name?.toUpperCase(), isAsc);\n        case 'last_name':\n          return compare(a.last_name?.toUpperCase(), b.last_name?.toUpperCase(), isAsc);\n        case 'work_type':\n          return compare(a.work_type?.toUpperCase(), b.work_type?.toUpperCase(), isAsc);\n        case 'contract_type':\n          return compare(a.contract_type?.toUpperCase(), b.contract_type?.toUpperCase(), isAsc);\n        case 'job_title':\n          return compare(a.job_title?.toUpperCase(), b.job_title?.toUpperCase(), isAsc);\n        case 'deadline_date':\n          return compare(a.deadline_date?.toUpperCase(), b.deadline_date?.toUpperCase(), isAsc);\n      \n        default:\n          return 0;\n      }\n    });\n  }\n  \n\n  openSnackBar() {\n    this.id = this.id\n  }\n\n ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;//paginator..............\n    this.dataSource.sort = this.sort;//sorting..........\n  }\n\n  ngOnInit(): void {\n    this.jobListing();  //listinggg\n    this.search=\"\";   // filter\n  }\n  \n\n  // Paginator -----------\n  paginationOptionChange(evt) {\n    this.event=evt\n    this.topPage = evt.pageIndex\n   var obj:any = {\n      search: this.search,\n      limit: evt.pageSize,\n       offset:  (evt.pageIndex * evt.pageSize)\n     }\n     if(this.search){\n      obj.search = this.search\n    }\n     this.Service.jobManagementList(obj).subscribe(async res => {\n       console.log(\"Response of all the service listing>>>>>\", res);\n        this.jobList1=res.data.records\n        for(let i=0; i<this.jobList1?.length; i++){\n          if(this.jobList1[i].contract_type=='temp_contract'){\n            let cType= \"Temp/Contract\"\n            this.jobList1[i].cType=cType\n          }\n          else if(this.jobList1[i].contract_type=='full_time'){\n            let cType ='Full Time'\n            this.jobList1[i].cType=cType\n          }\n          else if(this.jobList1[i].contract_type=='part_time'){\n          let cType ='Part Time'\n            this.jobList1[i].cType=cType\n          }\n          else if(this.jobList1[i].contract_type=='casual'){\n            let cType ='Casual'\n            this.jobList1[i].cType=cType\n          }\n        }\n        this.sortedData=this.jobList1\n        this.totalRecords = res.data.count\n     })\n  }\n  getPageSizeOptions() {\n    return [5,10,50,100];\n  }\n\n\n// listing-------------\n  jobListing() {\n    var obj: any = {\n      limit: 10,\n      offset: 0,\n      search: this.search,\n    }\n    if (this.search) {\n      obj.search = this.search\n    }\n  \n    this.Service.jobManagementList(obj).subscribe(res => {\n      console.log(\"Response==========\", res);\n      this.jobList1 = res.data.records\n      \n      for(let i=0; i<this.jobList1?.length; i++){\n        if(this.jobList1[i].contract_type=='temp_contract'){\n          let cType= \"Temp/Contract\"\n          this.jobList1[i].cType=cType\n        }\n        else if(this.jobList1[i].contract_type=='full_time'){\n          let cType ='Full Time'\n          this.jobList1[i].cType=cType\n        }\n        else if(this.jobList1[i].contract_type=='part_time'){\n        let cType ='Part Time'\n          this.jobList1[i].cType=cType\n        }\n        else if(this.jobList1[i].contract_type=='casual'){\n          let cType ='Casual'\n          this.jobList1[i].cType=cType\n        }\n      }\n      this.totalRecords = res.data.count\n      console.log(\"job List===>\",this.jobList1)\n\n      this.sortedData = this.jobList1\n      console.log(\"job sorted List===>\",this.sortedData)\n    })\n    console.log(\"Object==========\", obj);\n  }\n\n\n// filter------------\n  applyFilter(filterValue) {\n    this.search = filterValue.target.value\n    if (this.event) {\n      this.paginationOptionChange(this.event)\n    }\n    else {\n      this.jobListing()\n      \n      if (this.dataSource.paginator) {\n        this.dataSource.paginator.firstPage();\n  \n      }\n    }\n\n  }\n\nview_id(){\n  \n}\n\n\ndelete_id(id){\n  this.item_id=id\n  this.smallModal.show()\n  console.log(\"job management===>>>\",this.item_id);\n  this.ngOnInit()\n}\njobManageDelete(id){\n  var obj={\n    employer_job_id:id\n  }\n  console.log(\"deleted industry\",obj);\n  this.smallModal.hide()\n  this.Service.jobManagementDelete(obj).subscribe(res=>{\n    console.log(\"Response==========\",res);\n    this.Service.showMessage({ message: \"Deleted Successfully\" })\n    this.ngOnInit()\n    this.smallModal.hide()\n  })\n}\n\n\n  /** Whether the number of selected elements matches the total number of rows. */\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n   /** The label for the checkbox on the passed row */\n\n  checkboxLabel(row?: UserData): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id + 1}`;\n  }\n\n}\n\nfunction createNewUser(id: number): UserData {\n  const postedby = POSTEDBY[Math.round(Math.random() * (POSTEDBY.length - 1))] + ' ';\n  const first_name = FIRSTNAME[Math.round(Math.random() * (FIRSTNAME.length - 1))] + ' ';\n  const lastName = LASTNAME[Math.round(Math.random() * (LASTNAME.length - 1))] + ' ';\n  const worktype = WORKTYPE[Math.round(Math.random() * (WORKTYPE.length - 1))] + ' ';\n  const contracttype = CONTRACT[Math.round(Math.random() * (CONTRACT.length - 1))] + ' ';\n  const jobtitle = TITLE[Math.round(Math.random() * (TITLE.length - 1))] + ' ';\n  // const applications = APPLICATIONS[Math.round(Math.random() * (APPLICATIONS.length - 1))] + ' ';\n\n  return {\n    id: id.toString() + '.',\n    postedby: postedby,\n    first_name: first_name,\n    lastName:lastName,\n    worktype: worktype,\n    contracttype: contracttype,\n    jobtitle: jobtitle,\n    // applications: applications,\n    deadline: DEADLINE[Math.round(Math.random() * (DEADLINE.length - 1))],\n\n  };\n}\n\n\n// sorting..........\nfunction compare(a: string, b: string, isAsc: boolean): number {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n\n\n","export default \"<section class=\\\"jobs-mngmnt\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-12\\\">\\n        <mat-form-field appearance=\\\"standard\\\">\\n          <mat-label>Filter</mat-label>\\n          <input matInput (keyup)=\\\"applyFilter($event)\\\"  [(ngModel)]=\\\"search \\\" placeholder=\\\"Ex. Mia\\\" class=\\\"filter_input\\\" #input>\\n        </mat-form-field>\\n\\n        <div class=\\\"mat-elevation-z8\\\">\\n          <div class=\\\"table-responsive\\\">\\n            <table mat-table [dataSource]=\\\"sortedData\\\" matSort (matSortChange)=\\\"sortData($event)\\\">\\n              <!-- Checkbox Column -->\\n              <ng-container matColumnDef=\\\"select\\\">\\n                <th mat-header-cell *matHeaderCellDef>\\n                  <mat-checkbox (change)=\\\"$event ? masterToggle() : null\\\"\\n                    [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\n                    [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\"\\n                    [aria-label]=\\\"checkboxLabel()\\\" class=\\\"td-check\\\">\\n                  </mat-checkbox>\\n                </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                  <mat-checkbox (click)=\\\"$event.stopPropagation()\\\"\\n                    (change)=\\\"$event ? selection.toggle(row) : null\\\"\\n                    [checked]=\\\"selection.isSelected(row)\\\"\\n                    [aria-label]=\\\"checkboxLabel(row)\\\" class=\\\"td-check\\\">\\n                  </mat-checkbox>\\n                </td>\\n              </ng-container>\\n              <!-- ID Column -->\\n              <ng-container matColumnDef=\\\"id\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header=\\\"id\\\"> S.No </th>\\n                <td mat-cell *matCellDef=\\\"let row; let i=index\\\"> {{i+1}}  </td>\\n              </ng-container>\\n\\n              <!-- postedby Column -->\\n              <ng-container matColumnDef=\\\"postedby\\\">\\n                <th mat-header-cell *matHeaderCellDef  mat-sort-header=\\\"first_name\\\">Employer Name </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.user_detail.first_name}} {{row.user_detail.last_name}} </td>\\n              </ng-container>\\n              <!-- worktype Column -->\\n              <ng-container matColumnDef=\\\"worktype\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header=\\\"work_type\\\">Work Type</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.work_type}} </td>\\n              </ng-container>\\n              <!-- Company Column -->\\n              <ng-container matColumnDef=\\\"contracttype\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header=\\\"contract_type\\\">Contract Type</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.cType}} </td>\\n                <!-- <ng-container *ngIf=\\\"row?.contract_type == temp_contract\\\"> \\n                  <td mat-cell *matCellDef=\\\"let row\\\" > Temp/Contract </td> \\n                </ng-container>\\n                <ng-container *ngIf=\\\"row?.contract_type == full_time\\\"> \\n                  <td mat-cell *matCellDef=\\\"let row\\\" >Full Time </td> \\n                </ng-container>\\n                <ng-container *ngIf=\\\"row?.contract_type == part_time\\\"> \\n                  <td mat-cell *matCellDef=\\\"let row\\\" > Part Time </td> \\n                </ng-container>\\n                <ng-container *ngIf=\\\"row?.contract_type == casual\\\"> \\n                  <td mat-cell *matCellDef=\\\"let row\\\" > Casual </td> \\n                </ng-container> -->\\n              </ng-container>\\n\\n               <!-- Job title Column -->\\n              <ng-container matColumnDef=\\\"jobtitle\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header=\\\"job_title\\\">Job Title</th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.job_title}} </td>\\n              </ng-container>\\n             \\n              <!-- deadline Column -->\\n              <ng-container matColumnDef=\\\"deadline\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header=\\\"deadline_date\\\"> Deadline </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.deadline_date | date:\\\"MM/dd/yyyy \\\"}} </td>\\n              </ng-container>\\n              <!-- status column -->\\n              <ng-container matColumnDef=\\\"status\\\">\\n                <th mat-header-cell *matHeaderCellDef> Status </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                     <mat-slide-toggle [checked]=\\\"row.user_detail.status=='active'?true:false\\\"></mat-slide-toggle>\\n                   </td>\\n              </ng-container>\\n              <!-- status column -->\\n\\n\\n              <!-- <ng-container matColumnDef=\\\"applications\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Applicants </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"><a routerLink=\\\"/applicantsManagement\\\"> {{row.applications}}</a> </td>\\n              </ng-container> -->\\n\\n\\n               <!-- Action column -->\\n               <ng-container matColumnDef=\\\"action\\\">\\n                <th mat-header-cell *matHeaderCellDef> Action </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\">\\n                    <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" class=\\\"td-btn\\\">\\n                      <mat-icon>more_vert</mat-icon>\\n                    </button>\\n                    <mat-menu #menu=\\\"matMenu\\\" class=\\\"td-menu\\\">\\n                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"/viewJob/{{row._id}}\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\" (click)=\\\"view_id(row._id)\\\">visibility</mat-icon>\\n                        <span>View</span>\\n                      </a>\\n                      <!-- <a mat-menu-item class=\\\"\\\" routerLink=\\\"/editJob\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\">edit</mat-icon>\\n                        <span>Edit</span>\\n                      </a> -->\\n                      <a mat-menu-item class=\\\"\\\" data-toggle=\\\"modal\\\" (click)=\\\"delete_id(row._id)\\\">\\n                        <mat-icon class=\\\"material-icons-outlined\\\" >delete</mat-icon>\\n                        <span>Delete</span>\\n                      </a>\\n                    </mat-menu>\\n                </td>\\n              </ng-container>\\n\\n              <!-- Progress Column -->\\n              <!-- <ng-container matColumnDef=\\\"progress\\\">\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> Progress </th>\\n                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.progress}}% </td>\\n              </ng-container> -->\\n\\n              <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n              <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n              <!-- Row shown when there is no matching data. -->\\n              <tr class=\\\"mat-row\\\" *matNoDataRow>\\n                <td class=\\\"mat-cell\\\" colspan=\\\"4\\\">No data matching the filter \\\"{{input.value}}\\\"</td>\\n              </tr>\\n            </table>\\n          </div>\\n          <mat-paginator [length]=\\\"totalRecords\\\" [pageIndex]=\\\"topPage\\\" [pageSize]=\\\"limit\\\"\\n          [pageSizeOptions]=\\\"getPageSizeOptions()\\\" (page)=\\\"paginationOptionChange($event)\\\" showFirstLastButtons>\\n        </mat-paginator>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<!-- Modal -->\\n<div bsModal #smallModal=\\\"bs-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"smallModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-sm\\\" role=\\\"document\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <button type=\\\"button\\\" class=\\\"close td-btn\\\" (click)=\\\"smallModal.hide()\\\" aria-label=\\\"Close\\\">\\n          <span aria-hidden=\\\"true\\\" class=\\\"prof_modclose\\\">\\n            <img src=\\\"assets/img/Group 225.png\\\">\\n          </span>\\n        </button>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <p>Are you sure you want to delete the selected Job?</p>\\n      </div>\\n      <div class=\\\"modal-footer justify-content-center\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"smallModal.hide()\\\">No</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"jobManageDelete(this.item_id)\\\" (click)=\\\"openSnackBar()\\\">Yes</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { JobsManagementComponent } from './jobs-management.component';\n\nconst routes: Routes = [\n\n\t{\n\t\tpath: '',\n\t\tcomponent: JobsManagementComponent\n\t}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class JobsManagementRoutingModule { }\n"]}