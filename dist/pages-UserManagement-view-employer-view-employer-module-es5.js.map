{"version":3,"sources":["webpack:///src/app/pages/UserManagement/view-employer/view-employer.component.html","webpack:///src/app/pages/UserManagement/view-employer/view-employer-routing.module.ts","webpack:///src/app/pages/UserManagement/view-employer/view-employer.module.ts","webpack:///src/app/pages/UserManagement/view-employer/view-employer.component.scss","webpack:///src/app/pages/UserManagement/view-employer/view-employer.component.ts"],"names":["routes","path","component","ViewEmployerRoutingModule","imports","forChild","exports","ViewEmployerModule","declarations","forRoot","providers","TRANSID","AMOUNT","PAID","BALANCE","OFFER","SDATE","SUBSEXP","ViewEmployerComponent","_snackBar","route","Service","fb","router","displayedColumns","selection","EmployerDetails","group","first_name","required","maxLength","last_name","email","company_name","job_title","creation_date","password","status","Image","county","users","Array","from","length","_","k","createNewUser","dataSource","paginator","sort","employerdetails","event","filterValue","target","value","filter","trim","toLowerCase","firstPage","numSelected","selected","numRows","data","isAllSelected","clear","select","row","isSelected","id","obj","user_id","snapshot","paramMap","get","getEmployerDetail","subscribe","resp","console","log","patchValue","role","createdAt","selector","template","transid","Math","round","random","amount","paid","balance","offer","startdate","subsexp","toString"],"mappings":"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","file":"pages-UserManagement-view-employer-view-employer-module-es5.js","sourcesContent":["export default \"<section class=\\\"view-employer-sec\\\">\\n\\t<div class=\\\"container\\\">\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<div class=\\\"col-md-12\\\">\\n\\t\\t\\t\\t<div class=\\\"card\\\">\\n    \\t\\t\\t\\t<!-- <mat-tab-group> -->\\n    \\t\\t\\t\\t\\t<!-- <mat-tab label=\\\"Employer Profile Details\\\"> -->\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"card-header\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>Employer Profile Detail</strong>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"card-body\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<form class=\\\"\\\" [formGroup]=\\\"EmployerDetails\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"edit-wrapper\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"text-center edit-profile\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"user_dp position-relative\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<img src=\\\"assets/img/avatars/8.jpg\\\" class=\\\"img-fluid\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</span>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"edit-form mt-4\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"edit-form-fields\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row justify-content-center\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-8\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row only-view\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>First Name</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"Mike\\\" formControlName=\\\"first_name\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Last Name</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"John\\\" formControlName=\\\"last_name\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row only-view\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Work Email Address</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"abc@gmail.com\\\" formControlName=\\\"email\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Company Name</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"abc\\\" formControlName=\\\"company_name\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row only-view\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Job Title</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"Employer\\\" formControlName=\\\"job_title\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Creation Date (Time)</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"{{EmployerDetails.value.creation_date | date:'dd/mm/yyyy'}} ({{EmployerDetails.value.creation_date | date:'shortTime'}})\\\" formControlName=\\\"creation_date\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<!-- <mat-form-field appearance=\\\"fill\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-label>Choose a date</mat-label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input matInput [matDatepicker]=\\\"picker\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<mat-datepicker #picker></mat-datepicker>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</mat-form-field> -->\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row only-view\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<!-- <div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Password</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"abc123@\\\" formControlName=\\\"password\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div> -->\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"col-md-6\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<label>Status</label>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" name=\\\"\\\" class=\\\"form-control\\\" value=\\\"Active\\\" formControlName=\\\"status\\\"> \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"edit-btns text-right\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a class=\\\"btn btn-primary\\\" routerLink=\\\"/employersList\\\">Back</a>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t\\t\\t</form>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<!-- </mat-tab> -->\\n\\t\\t\\t\\t\\t\\t<!-- <mat-tab label=\\\"Orders and Insurances\\\"> -->\\n\\t\\t\\t\\t\\t\\t\\t<!-- <div class=\\\"card-header\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<strong>View Graduate Details</strong>\\n\\t\\t\\t\\t\\t\\t\\t</div> -->\\n\\t\\t\\t\\t\\t\\t\\t<!-- <div class=\\\"card-body\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t\\t\\t\\t\\t      <div class=\\\"col-md-12\\\">\\n\\t\\t\\t\\t\\t\\t\\t        <mat-form-field appearance=\\\"standard\\\">\\n\\t\\t\\t\\t\\t\\t\\t          <mat-label>Filter</mat-label>\\n\\t\\t\\t\\t\\t\\t\\t          <input matInput (keyup)=\\\"applyFilter($event)\\\" placeholder=\\\"Ex. Mia\\\" class=\\\"filter_input\\\" #input>\\n\\t\\t\\t\\t\\t\\t\\t        </mat-form-field>\\n\\n\\t\\t\\t\\t\\t\\t\\t        <div class=\\\"mat-elevation-z8\\\">\\n\\t\\t\\t\\t\\t\\t\\t          <div class=\\\"table-responsive\\\">\\n\\t\\t\\t\\t\\t\\t\\t            <table mat-table [dataSource]=\\\"dataSource\\\" matSort> -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- Checkbox Column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"select\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef>\\n\\t\\t\\t\\t\\t\\t\\t                  <mat-checkbox (change)=\\\"$event ? masterToggle() : null\\\"\\n\\t\\t\\t\\t\\t\\t\\t                    [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\n\\t\\t\\t\\t\\t\\t\\t                    [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\"\\n\\t\\t\\t\\t\\t\\t\\t                    [aria-label]=\\\"checkboxLabel()\\\" class=\\\"td-check\\\">\\n\\t\\t\\t\\t\\t\\t\\t                  </mat-checkbox>\\n\\t\\t\\t\\t\\t\\t\\t                </th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\">\\n\\t\\t\\t\\t\\t\\t\\t                  <mat-checkbox (click)=\\\"$event.stopPropagation()\\\"\\n\\t\\t\\t\\t\\t\\t\\t                    (change)=\\\"$event ? selection.toggle(row) : null\\\"\\n\\t\\t\\t\\t\\t\\t\\t                    [checked]=\\\"selection.isSelected(row)\\\"\\n\\t\\t\\t\\t\\t\\t\\t                    [aria-label]=\\\"checkboxLabel(row)\\\" class=\\\"td-check\\\">\\n\\t\\t\\t\\t\\t\\t\\t                  </mat-checkbox>\\n\\t\\t\\t\\t\\t\\t\\t                </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- ID Column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"id\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header> S.No </th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.id}} </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\n\\t\\t\\t\\t\\t\\t\\t              <!-- postedby Column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"transid\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header>Invoice ID </th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.transid}} </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\n\\n\\t\\t\\t\\t\\t\\t\\t              <!-- Company Column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"offer\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header>Offer Selected</th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.offer}} </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\n\\t\\t\\t\\t\\t\\t\\t               <!-- Job title Column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"startdate\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header>Start Date</th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.startdate}} </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\t\\t\\t\\t\\t\\t\\t              \\n\\t\\t\\t\\t\\t\\t\\t              <!-- status column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"subsexp\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header> Expiry date </th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\">{{row.subsexp}}</td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container>\\n\\n\\t\\t\\t\\t\\t\\t\\t              <ng-container matColumnDef=\\\"status\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"><span class=\\\"badge badge-success\\\">Paid</span></td>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"><span class=\\\"badge badge-primary\\\">Pending</span></td>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"><span class=\\\"badge badge-danger\\\">Failed</span></td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\n\\t\\t\\t\\t\\t\\t\\t              <!-- Company Column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"amount\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header>Amount</th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> ${{row.amount}} </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container>\\n\\n\\t\\t\\t\\t\\t\\t\\t              <ng-container matColumnDef=\\\"paid\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header>Paid</th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> ${{row.paid}} </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container>\\n\\n\\t\\t\\t\\t\\t\\t\\t              <ng-container matColumnDef=\\\"balance\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header>Balance</th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> ${{row.balance}} </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\t\\t\\t\\t\\t\\t\\t               <!-- Action column -->\\n\\t\\t\\t\\t\\t\\t\\t               <!-- <ng-container matColumnDef=\\\"action\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef> Action </th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\">\\n\\t\\t\\t\\t\\t\\t\\t                    <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" class=\\\"td-btn\\\">\\n\\t\\t\\t\\t\\t\\t\\t                      <mat-icon>more_vert</mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t                    </button>\\n\\t\\t\\t\\t\\t\\t\\t                    <mat-menu #menu=\\\"matMenu\\\" class=\\\"td-menu\\\">\\n\\t\\t\\t\\t\\t\\t\\t                      <a mat-menu-item class=\\\"\\\" routerLink=\\\"/\\\">\\n\\t\\t\\t\\t\\t\\t\\t                        <mat-icon class=\\\"material-icons-outlined\\\">visibility</mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t                        <span>View</span>\\n\\t\\t\\t\\t\\t\\t\\t                      </a>\\n\\t\\t\\t\\t\\t\\t\\t                      <a mat-menu-item class=\\\"\\\" data-toggle=\\\"modal\\\" (click)=\\\"smallModal.show()\\\">\\n\\t\\t\\t\\t\\t\\t\\t                        <mat-icon class=\\\"material-icons-outlined\\\">delete</mat-icon>\\n\\t\\t\\t\\t\\t\\t\\t                        <span>Delete</span>\\n\\t\\t\\t\\t\\t\\t\\t                      </a>\\n\\t\\t\\t\\t\\t\\t\\t                    </mat-menu>\\n\\t\\t\\t\\t\\t\\t\\t                </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\n\\t\\t\\t\\t\\t\\t\\t              <!-- Progress Column -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <ng-container matColumnDef=\\\"progress\\\">\\n\\t\\t\\t\\t\\t\\t\\t                <th mat-header-cell *matHeaderCellDef mat-sort-header> Progress </th>\\n\\t\\t\\t\\t\\t\\t\\t                <td mat-cell *matCellDef=\\\"let row\\\"> {{row.progress}}% </td>\\n\\t\\t\\t\\t\\t\\t\\t              </ng-container> -->\\n\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n\\t\\t\\t\\t\\t\\t\\t              <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr> -->\\n\\n\\t\\t\\t\\t\\t\\t\\t              <!-- Row shown when there is no matching data. -->\\n\\t\\t\\t\\t\\t\\t\\t              <!-- <tr class=\\\"mat-row\\\" *matNoDataRow>\\n\\t\\t\\t\\t\\t\\t\\t                <td class=\\\"mat-cell\\\" colspan=\\\"4\\\">No data matching the filter \\\"{{input.value}}\\\"</td>\\n\\t\\t\\t\\t\\t\\t\\t              </tr>\\n\\t\\t\\t\\t\\t\\t\\t            </table>\\n\\t\\t\\t\\t\\t\\t\\t          </div>\\n\\t\\t\\t\\t\\t\\t\\t          <mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" aria-label=\\\"Select page of users\\\"></mat-paginator>\\n\\t\\t\\t\\t\\t\\t\\t        </div>\\n\\t\\t\\t\\t\\t\\t\\t      </div>\\n\\t\\t\\t\\t\\t\\t\\t    </div>\\n\\t\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t</mat-tab> -->\\n        \\t\\t\\t<!-- </mat-tab-group> -->\\n\\t\\t\\t\\t</div>\\n\\n\\t\\t\\t\\t\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n</section>\\n\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ViewEmployerComponent } from './view-employer.component';\n\nconst routes: Routes = [\n\t{\n\t\tpath: '',\n\t\tcomponent: ViewEmployerComponent\n\t}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ViewEmployerRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ViewEmployerRoutingModule } from './view-employer-routing.module';\nimport { ViewEmployerComponent } from './view-employer.component';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatInputModule } from '@angular/material/input';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n\n\n\n@NgModule({\n  declarations: [\n    ViewEmployerComponent\n  ],\n  imports: [\n    CommonModule,\n    ViewEmployerRoutingModule,\n    MatPaginatorModule,\n    MatFormFieldModule,\n    MatSlideToggleModule,\n    MatCheckboxModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTableModule,\n    MatProgressBarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatInputModule,\n    ModalModule,\n    BsDropdownModule.forRoot() ,\n    MatTabsModule\n\n  ],\n  providers: [BsModalRef]\n})\nexport class ViewEmployerModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2aWV3LWVtcGxveWVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\nimport {SelectionModel} from '@angular/cdk/collections';\n\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TopgradserviceService } from '../../../topgradservice.service';\n\n\nexport interface UserData {\n  id: string;\n  transid: string;\n  amount: string;\n  paid: string;\n  balance: string;\n  offer: string;\n  startdate: string;\n  subsexp: string;\n}\n\n/** Constants used to fill up our data base. */\n\nconst TRANSID: string[] = [\n  'INV-65D9E592', 'INV-95D9E0897', 'INV-32D9E092'\n];\n\n\nconst AMOUNT: string[] = [\n  '195',\n];\n\nconst PAID: string[] = [\n  '195',\n];\n\nconst BALANCE: string[] = [\n  '0',\n];\n\n\nconst OFFER: string[] = [\n  'Basic Internship Agreement', 'Insurance and Agreement', 'Insurance Only'\n];\nconst SDATE: string[] = [\n  '08-09-2021', '07-09-2021', '01-09-2021', '08-09-2021', '08-09-2021', '08-09-2021', '08-09-2021', '08-09-2021'\n];\nconst SUBSEXP: string[] = [\n  '08-09-2021', '07-09-2021', '01-09-2021', '08-09-2021', '08-09-2021', '08-09-2021', '08-09-2021', '08-09-2021'\n];\n\n@Component({\n  selector: 'app-view-employer',\n  templateUrl: './view-employer.component.html',\n  styleUrls: ['./view-employer.component.scss']\n})\nexport class ViewEmployerComponent implements OnInit {\n\n  displayedColumns: string[] = ['select', 'id', 'transid', 'offer', 'startdate', 'subsexp', 'status', 'amount', 'paid', 'action'];\n  dataSource: MatTableDataSource<UserData>;\n  selection = new SelectionModel<UserData>(true, []);\n  \n  @ViewChild('smallModal') public smallModal: ModalDirective;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  EmployerDetails = this.fb.group({\n    first_name: ['', [Validators.required, Validators.maxLength(50)]],\n    last_name: ['', [Validators.required, Validators.maxLength(50)]],\n    email: ['', [Validators.required, Validators.maxLength(50)]],\n    company_name: ['', [Validators.required, Validators.maxLength(50)]],\n    job_title: ['', [Validators.required, Validators.maxLength(50)]],\n    creation_date: ['', [Validators.required, Validators.maxLength(50)]],\n    password: ['', [Validators.required, Validators.maxLength(50)]],\n    status: ['', [Validators.required, Validators.maxLength(50)]],\n    Image: ['',],\n    county:['']\n  });\n\n\n\n  constructor(private _snackBar: MatSnackBar, private route:ActivatedRoute,private Service:TopgradserviceService, private fb:FormBuilder, private router: Router ) { \n  \t// Create 100 users\n    const users = Array.from({length: 50}, (_, k) => createNewUser(k + 1));\n\n    // Assign the data to the data source for the table to render\n    this.dataSource = new MatTableDataSource(users);\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  ngOnInit(): void {\n    this.employerdetails();\n    \n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n   /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: UserData): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.id + 1}`;\n  }\n\n  employerdetails(){\n    var obj = {\n      user_id: this.route.snapshot.paramMap.get('id')\n    }\n    this.Service.getEmployerDetail(obj).subscribe((resp) => {\n      console.log(\"employer detail is ====>\", resp)\n\n      this.EmployerDetails.patchValue({\n        first_name: resp.data.first_name,\n        last_name: resp.data.last_name,\n        email:resp.data.email,\n        company_name: resp.data.company_name,\n        job_title: resp.data.role,\n        password: resp.data.password,\n        creation_date: resp.data.createdAt,\n        status: resp.data.status\n      })\n      console.log(\"forrmmmmmmmm==========>\",this.EmployerDetails);\n      \n    }) \n  }\n\n}\n\nfunction createNewUser(id: number): UserData {\n  const transid = TRANSID[Math.round(Math.random() * (TRANSID.length - 1))] + ' ';\n  const amount = AMOUNT[Math.round(Math.random() * (AMOUNT.length - 1))] + ' ';\n  const paid = PAID[Math.round(Math.random() * (PAID.length - 1))] + ' ';\n  const balance = BALANCE[Math.round(Math.random() * (BALANCE.length - 1))] + ' ';\n  const offer = OFFER[Math.round(Math.random() * (OFFER.length - 1))] + ' ';\n  const startdate = SDATE[Math.round(Math.random() * (SDATE.length - 1))] + ' ';\n  const subsexp = SUBSEXP[Math.round(Math.random() * (SUBSEXP.length - 1))] + ' ';\n\n  return {\n    id: id.toString() + '.',\n    transid: transid,\n    amount: amount,\n    paid: paid,\n    balance: balance,\n    offer: offer,\n    startdate: startdate,\n    subsexp: subsexp\n\n  };\n\n  \n}\n\n"]}